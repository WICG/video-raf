<pre class='metadata'>
Title: HTMLVideoElement.requestAnimationFrame()
Repository: wicg/video-raf
Status: CG-DRAFT
ED: https://wicg.github.io/video-raf/
Shortname: video-raf
Level: 1
Group: wicg
Editor: Thomas Guilbert, w3cid 120583, Google Inc. https://google.com/
Abstract: &lt;video&gt;.requestAnimationFrame() allows web authors to be notified when a frame has been presented for composition.
!Participate: <a href="https://github.com/wicg/video-raf">Git Repository.</a>
!Participate: <a href="https://github.com/wicg/video-raf/issues/new">File an issue.</a>
!Version History: <a href="https://github.com/wicg/video-raf/commits">https://github.com/wicg/video-raf/commits</a>
Indent: 2
Markup Shorthands: markdown yes
</pre>



# Introduction #    {#introduction}

*This section is non-normative*

This is a proposal to add a {{AnimationFrameProvider|requestAnimationFrame()}} method to the {{HTMLVideoElement}}.

This method allows web authors to register a callback which will run the next time a video frame has been presented for composition. The callback provides {{VideoFrameMetadata|metadata}} about the frame that was presented, and is executed during the "[=update the rendering=]" portion of the [=event loop processing model=].

# VideoFrameMetadata #    {#video-frame-metadata}

<pre class='idl'>
  dictionary VideoFrameMetadata {
    required DOMHighResTimeStamp presentationTime;
    required DOMHighResTimeStamp expectedPresentationTime;

    required unsigned long width;
    required unsigned long height;

    double presentationTimestamp;
    double elapsedProcessingTime;
    unsigned long presentedFrames;
    DOMHighResTimeStamp captureTime;
    DOMHighResTimeStamp receiveTime;
    unsigned long rtpTimestamp;
  };
</pre>

## Attributes ## {#video-frame-metadata-attributes}

: <dfn for="VideoFrameMetadata" dict-member>presentationTime</dfn>
:: The time at which the user agent submitted the frame for composition.

: <dfn for="VideoFrameMetadata" dict-member>expectedPresentationTime</dfn>
:: The time at which the user agent expects the frame to be visible.

Note: <dfn>media pixels</dfn> refers to the raw media pixels, after internal
cropping, but before aspect ratio adjustments. This differs from CSS pixels
(used by {{HTMLVideoElement/videoWidth|videoWidth}} and
{{HTMLVideoElement/videoHeight|videoHeight}}), which account for aspect ratio
adjustments. The {{width}} and {{height}} in [=media pixels=] can be used as a
texture's width and height when calling <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D">`texImage2D()`</a>.

: <dfn for="VideoFrameMetadata" dict-member>width</dfn>
:: The width of the video frame, in [=media pixels=].

: <dfn for="VideoFrameMetadata" dict-member>height</dfn>
:: The height of the video frame, in [=media pixels=].

: <dfn for="VideoFrameMetadata" dict-member>presentationTimestamp</dfn>
::  The media presentation timestamp in seconds of the frame presented (e.g. its
  timestamp on the {{HTMLMediaElement/currentTime|video.currentTime}} timeline).
  May not be known to the compositor or exist in all cases.

: <dfn for="VideoFrameMetadata" dict-member>elapsedProcessingTime</dfn>
::  The elapsed time in seconds from submission of the encoded packet with
  the same presentationTimestamp as this frame to the decoder until the
  decoded frame was ready for presentation.

:: In addition to decoding time, may include processing time. E.g., YUV
  conversion and/or staging into GPU backed memory.

: <dfn for="VideoFrameMetadata" dict-member>presentedFrames</dfn>
::  A count of the number of frames submitted for composition. Allows clients
  to determine if frames were missed between VideoFrameRequestCallbacks.

: <dfn for="VideoFrameMetadata" dict-member>captureTime</dfn>
::  For video frames coming from either a local or remote source, this is the
  time at which the frame was captured by the camera. For a remote source, the
  capture time is estimated using clock synchronization and RTCP sender reports
  to convert RTP timestamps to capture time as specified in
  [[RFC3550#section-6.4.1|RFC 3550 Section 6.4.1]]

: <dfn for="VideoFrameMetadata" dict-member>receiveTime</dfn>
::  For video frames coming from a remote source, this is the
  time the encoded frame was received by the platform, i.e., the time at
  which the last packet belonging to this frame was received over the network.

: <dfn for="VideoFrameMetadata" dict-member>rtpTimestamp</dfn>
::  The RTP timestamp associated with this video frame.

# VideoFrameRequestCallback #    {#video-frame-request-callback}

<pre class='idl'>
  callback VideoFrameRequestCallback = void(DOMHighResTimeStamp time, VideoFrameMetadata metadata);
</pre>

Each {{VideoFrameRequestCallback}} object has a <dfn>canceled</dfn> boolean initially set to false.

# HTMLVideoElement.requestAnimationFrame() #  {#video-raf}
<pre class='idl'>
  partial interface HTMLVideoElement {
      unsigned long requestAnimationFrame(VideoFrameRequestCallback callback);
      void cancelAnimationFrame(unsigned long handle);
  };
</pre>

## Methods ## {#video-raf-methods}

Each {{HTMLVideoElement}} has a <dfn>list of animation frame callbacks</dfn>, which is initially empty, and an <dfn>animation frame callback identifier</dfn>, which is a number which is initially zero.

: <dfn for="HTMLVideoElement" method>requestAnimationFrame(|callback|)</dfn>
:: Registers a callback to be fired the next time a frame is presented to the compositor.

   When `requestAnimationFrame` is called, the user agent MUST run the following steps:
     1. Let |video| be the {{HTMLVideoElement}} on which `requestAnimationFrame` is
        invoked.
     1. Increment |video|'s [=animation frame callback identifier=] by one.
     1. Append |callback| to |video|'s [=list of animation frame callbacks=], associated with |video|'s [=animation frame callback identifier=]’s current value.
     1. Return |video|'s [=animation frame callback identifier=]’s current value.

: <dfn for="HTMLVideoElement" method>cancelAnimationFrame(|handle|)</dfn>
:: Cancels an existing video frame request callback given its handle.

  When `cancelAnimationFrame` is called, the user agent MUST run the following steps:

  1. Let |video| be the target {{HTMLVideoElement}} object on which `requestAnimationFrame` is invoked.
  1. Find the entry in |video|'s [=list of animation frame callbacks=] that is associated with the value |handle|.
  1. If there is such an entry, set its [=canceled=] boolean to <code>true</code> and remove it from |video|'s [=list of animation frame callbacks=].

## Procedures ## {#video-raf-procedures}

Issue: Describe how an {{HTMLVideoElement}} should schedule the [=run the video animation frame callbacks=] procedure when a new frame is presented.

<div algorithm="run the video animation frame callbacks">

To <dfn>run the video animation frame callbacks</dfn> for a {{HTMLVideoElement}} |video| with a timestamp |now|, run the following steps:

1. If |video|'s [=list of animation frame callbacks=] is empty, abort these steps.
1. Let |metadata| be the {{VideoFrameMetadata}} dictionary built from |video|'s latest presented frame.
1. Let |callbacks| be the [=list of animation frame callbacks=].
1. Set |video|'s [=list of animation frame callbacks=] to be empty.
1. For each entry in |callbacks|
  1. If the entry's [=canceled=] boolean is <code>true</code>, continue to the next entry.
  1. [=Invoke=] the callback, passing |now| and |metadata| as arguments
  1. If an exception is thrown, [=report the exception=].

</div>
